// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef G_ENGINES_PB_H__
#define G_ENGINES_PB_H__

#include "g_regs_pb.h"

extern const PRB_MSG_DESC prb_messages_nvdebug_eng[];

// Message descriptor pointers
#define NVDEBUG_ENG_MC (&prb_messages_nvdebug_eng[0])
#define NVDEBUG_ENG_GPU (&prb_messages_nvdebug_eng[1])
#define NVDEBUG_ENG_NVD (&prb_messages_nvdebug_eng[2])
#define NVDEBUG_ENG_KGSP (&prb_messages_nvdebug_eng[3])
#define NVDEBUG_ENG_MC_RMDATA (&prb_messages_nvdebug_eng[4])
#define NVDEBUG_ENG_MC_PCIBARINFO (&prb_messages_nvdebug_eng[5])
#define NVDEBUG_ENG_KGSP_RPCINFO (&prb_messages_nvdebug_eng[6])

// Message maximum lengths
// Does not include repeated fields, strings and byte arrays.
#define NVDEBUG_ENG_MC_LEN 66
#define NVDEBUG_ENG_GPU_LEN 62
#define NVDEBUG_ENG_NVD_LEN 30
#define NVDEBUG_ENG_KGSP_LEN 88
#define NVDEBUG_ENG_MC_RMDATA_LEN 6
#define NVDEBUG_ENG_MC_PCIBARINFO_LEN 22
#define NVDEBUG_ENG_KGSP_RPCINFO_LEN 40

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_mc[];

// 'Mc' field descriptor pointers
#define NVDEBUG_ENG_MC_RM_DATA (&prb_fields_nvdebug_eng_mc[0])
#define NVDEBUG_ENG_MC_PCI_BARS (&prb_fields_nvdebug_eng_mc[1])
#define NVDEBUG_ENG_MC_REGS (&prb_fields_nvdebug_eng_mc[2])

// 'Mc' field lengths
#define NVDEBUG_ENG_MC_RM_DATA_LEN 9
#define NVDEBUG_ENG_MC_PCI_BARS_LEN 25
#define NVDEBUG_ENG_MC_REGS_LEN 29

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_gpu[];

// 'Gpu' field descriptor pointers
#define NVDEBUG_ENG_GPU_GPU_ID (&prb_fields_nvdebug_eng_gpu[0])
#define NVDEBUG_ENG_GPU_IS_SLI (&prb_fields_nvdebug_eng_gpu[1])
#define NVDEBUG_ENG_GPU_IS_NOTEBOOK (&prb_fields_nvdebug_eng_gpu[2])
#define NVDEBUG_ENG_GPU_IS_VIRTUAL (&prb_fields_nvdebug_eng_gpu[3])
#define NVDEBUG_ENG_GPU_IS_FULL_POWER (&prb_fields_nvdebug_eng_gpu[4])
#define NVDEBUG_ENG_GPU_IS_IN_FULLCHIP_RESET (&prb_fields_nvdebug_eng_gpu[5])
#define NVDEBUG_ENG_GPU_IS_IN_SEC_BUS_RESET (&prb_fields_nvdebug_eng_gpu[6])
#define NVDEBUG_ENG_GPU_IS_IN_GC6_RESET (&prb_fields_nvdebug_eng_gpu[7])
#define NVDEBUG_ENG_GPU_IS_SUSPENDED (&prb_fields_nvdebug_eng_gpu[8])
#define NVDEBUG_ENG_GPU_IS_LOST (&prb_fields_nvdebug_eng_gpu[9])
#define NVDEBUG_ENG_GPU_IS_ACCESSIBLE (&prb_fields_nvdebug_eng_gpu[10])
#define NVDEBUG_ENG_GPU_REGS (&prb_fields_nvdebug_eng_gpu[11])
#define NVDEBUG_ENG_GPU_RUSD_MASK (&prb_fields_nvdebug_eng_gpu[12])

// 'Gpu' field lengths
#define NVDEBUG_ENG_GPU_GPU_ID_LEN 5
#define NVDEBUG_ENG_GPU_IS_SLI_LEN 1
#define NVDEBUG_ENG_GPU_IS_NOTEBOOK_LEN 1
#define NVDEBUG_ENG_GPU_IS_VIRTUAL_LEN 1
#define NVDEBUG_ENG_GPU_IS_FULL_POWER_LEN 1
#define NVDEBUG_ENG_GPU_IS_IN_FULLCHIP_RESET_LEN 1
#define NVDEBUG_ENG_GPU_IS_IN_SEC_BUS_RESET_LEN 1
#define NVDEBUG_ENG_GPU_IS_IN_GC6_RESET_LEN 1
#define NVDEBUG_ENG_GPU_IS_SUSPENDED_LEN 1
#define NVDEBUG_ENG_GPU_IS_LOST_LEN 1
#define NVDEBUG_ENG_GPU_IS_ACCESSIBLE_LEN 1
#define NVDEBUG_ENG_GPU_REGS_LEN 29
#define NVDEBUG_ENG_GPU_RUSD_MASK_LEN 5

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_nvd[];

// 'Nvd' field descriptor pointers
#define NVDEBUG_ENG_NVD_REGS (&prb_fields_nvdebug_eng_nvd[0])

// 'Nvd' field lengths
#define NVDEBUG_ENG_NVD_REGS_LEN 29

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_kgsp[];

// 'KGsp' field descriptor pointers
#define NVDEBUG_ENG_KGSP_RPC_HISTORY (&prb_fields_nvdebug_eng_kgsp[0])
#define NVDEBUG_ENG_KGSP_EVENT_HISTORY (&prb_fields_nvdebug_eng_kgsp[1])

// 'KGsp' field lengths
#define NVDEBUG_ENG_KGSP_RPC_HISTORY_LEN 43
#define NVDEBUG_ENG_KGSP_EVENT_HISTORY_LEN 43

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_mc_rmdata[];

// 'RmData' field descriptor pointers
#define NVDEBUG_ENG_MC_RMDATA_PMCBOOT0 (&prb_fields_nvdebug_eng_mc_rmdata[0])

// 'RmData' field lengths
#define NVDEBUG_ENG_MC_RMDATA_PMCBOOT0_LEN 5

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_mc_pcibarinfo[];

// 'PciBarInfo' field descriptor pointers
#define NVDEBUG_ENG_MC_PCIBARINFO_OFFSET (&prb_fields_nvdebug_eng_mc_pcibarinfo[0])
#define NVDEBUG_ENG_MC_PCIBARINFO_LENGTH (&prb_fields_nvdebug_eng_mc_pcibarinfo[1])

// 'PciBarInfo' field lengths
#define NVDEBUG_ENG_MC_PCIBARINFO_OFFSET_LEN 10
#define NVDEBUG_ENG_MC_PCIBARINFO_LENGTH_LEN 10

extern const PRB_FIELD_DESC prb_fields_nvdebug_eng_kgsp_rpcinfo[];

// 'RpcInfo' field descriptor pointers
#define NVDEBUG_ENG_KGSP_RPCINFO_FUNCTION (&prb_fields_nvdebug_eng_kgsp_rpcinfo[0])
#define NVDEBUG_ENG_KGSP_RPCINFO_TS_START (&prb_fields_nvdebug_eng_kgsp_rpcinfo[1])
#define NVDEBUG_ENG_KGSP_RPCINFO_TS_END (&prb_fields_nvdebug_eng_kgsp_rpcinfo[2])
#define NVDEBUG_ENG_KGSP_RPCINFO_DATA0 (&prb_fields_nvdebug_eng_kgsp_rpcinfo[3])
#define NVDEBUG_ENG_KGSP_RPCINFO_DATA1 (&prb_fields_nvdebug_eng_kgsp_rpcinfo[4])

// 'RpcInfo' field lengths
#define NVDEBUG_ENG_KGSP_RPCINFO_FUNCTION_LEN 5
#define NVDEBUG_ENG_KGSP_RPCINFO_TS_START_LEN 10
#define NVDEBUG_ENG_KGSP_RPCINFO_TS_END_LEN 10
#define NVDEBUG_ENG_KGSP_RPCINFO_DATA0_LEN 5
#define NVDEBUG_ENG_KGSP_RPCINFO_DATA1_LEN 5

extern const PRB_SERVICE_DESC prb_services_nvdebug_eng[];

// Service descriptor pointers

#endif // G_ENGINES_PB_H__
